{
  "data": {
    "lesson": {
      "id": 286222,
      "key": "bd6228e5-42e6-43e4-beea-218fc5ad6ac2",
      "title": "Matrix Math and NumPy Refresher",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "In this lesson, you'll review the matrix math you'll need to understand to build your neural networks. You'll also explore NumPy, the library you'll use to efficiently deal with matrices in Python. ",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/bd6228e5-42e6-43e4-beea-218fc5ad6ac2/286222/1544457899475/Matrix+Math+and+NumPy+Refresher+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/bd6228e5-42e6-43e4-beea-218fc5ad6ac2/286222/1544457894137/Matrix+Math+and+NumPy+Refresher+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 286223,
          "key": "93cb98bb-4789-4c3d-84b4-091f3e2b8afa",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "resources": null,
          "atoms": [
            {
              "id": 286340,
              "key": "6fe09e87-6001-42ac-b720-779f9862dcb0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/January/58895788_input-times-weights/input-times-weights.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6fe09e87-6001-42ac-b720-779f9862dcb0",
              "caption": "",
              "alt": null,
              "width": 467,
              "height": 397,
              "instructor_notes": null
            },
            {
              "id": 286233,
              "key": "536fed23-e0a1-4a77-a06d-dceaf08ac288",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Deep learning involves a lot of matrix math, and it’s important for you to understand the basics before diving into building your own neural networks. These lessons provide a short refresher on what you need to know for this course, along with some guidance for using the [NumPy](http://www.numpy.org) library to work efficiently with matrices in Python.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 286224,
          "key": "85fddb4e-83da-41cf-8a85-10353e24eb43",
          "title": "Data Dimensions",
          "semantic_type": "Concept",
          "is_public": true,
          "resources": null,
          "atoms": [
            {
              "id": 286872,
              "key": "d16e9a9e-6040-4644-bd04-18e6d7b0f615",
              "title": "Data Has Dimensions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "F4NSv776X0c",
                "china_cdn_id": "F4NSv776X0c.mp4"
              }
            }
          ]
        },
        {
          "id": 286225,
          "key": "1c7f0a35-f2f6-4082-9357-fa842d332c2d",
          "title": "Data in NumPy",
          "semantic_type": "Concept",
          "is_public": true,
          "resources": null,
          "atoms": [
            {
              "id": 286246,
              "key": "19b7afd4-90fe-4ea9-bd53-16bd7c2fa5ca",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Introducing NumPy\n\nPython is convenient, but it can also be slow. However, it does allow you to access libraries that execute faster code written in languages like C. NumPy is one such library: it provides fast alternatives to math operations in Python and is designed to work efficiently with groups of numbers - like matrices.\n\nNumPy is a large library and we are only going to scratch the surface of it here. If you plan on doing much math with Python, you should definitely spend some time exploring its [documentation](https://docs.scipy.org/doc/numpy/reference/) to learn more.\n\n### Importing NumPy\n\nWhen importing the NumPy library, the convention you'll see used most often – including here – is to name it `np`, like so:\n```\nimport numpy as np \n```\nNow you can use the library by prefixing the names of functions and types with `np.`, which you'll see in the following examples.\n\n### Data Types and Shapes\n\nThe most common way to work with numbers in NumPy is through [`ndarray`](https://docs.scipy.org/doc/numpy/reference/arrays.html) objects. They are similar to Python lists, but can have any number of dimensions. Also, `ndarray` supports fast math operations, which is just what we want.\n\nSince it can store any number of dimensions, you can use `ndarray`s to represent any of the data types we covered before: scalars, vectors, matrices, or tensors. \n\n### Scalars\n\n[Scalars in NumPy](https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html) are a bit more involved than in Python. Instead of Python’s basic types like `int`, `float`, etc., NumPy lets you specify signed and unsigned types, as well as different sizes. So instead of Python’s `int`, you have access to types like `uint8`, `int8`, `uint16`, `int16`, and so on.\n\nThese types are important because every object you make (vectors, matrices, tensors) eventually stores scalars. And when you create a NumPy array, you can specify the type - but **every item in the array must have the same type**. In this regard, NumPy arrays are more like C arrays than Python lists.\n\nIf you want to create a NumPy array that holds a scalar, you do so by passing the value to NumPy's `array` function, like so:\n```\ns = np.array(5)\n```\nYou can still perform math between `ndarray`s, NumPy scalars, and normal Python scalars, though, as you'll see in the element-wise math lesson.\n \nYou can see the shape of your arrays by checking their `shape` attribute. So if you executed this code:\n```\ns.shape\n```\nit would print out the result, an empty pair of parenthesis, `()`.  This indicates that it has zero dimensions.\n\nEven though scalars are inside arrays, you still use them like a normal scalar. So you could type:\n```\nx = s + 3\n```\nand `x` would now equal `8`. If you were to check the type of `x`, you'd find it is probably `numpy.int64`, because its working with NumPy types, not Python types.\n\nBy the way, even scalar types support most of the array functions. so you can call `x.shape` and it would return `()` because it has zero dimensions, even though it is not an array. If you tried that with a normal Python scalar, you'd get an error.\n \n### Vectors\n\nTo create a vector, you'd pass a Python list to the `array` function, like this:\n```\nv = np.array([1,2,3])\n```\nIf you check a vector's `shape` attribute, it will return a single number representing the vector's one-dimensional length. In the above example, `v.shape` would return `(3,)` \n\nNow that there is a number, you can see that the shape is a tuple with the sizes of each of the `ndarray`'s dimensions. For scalars it was just an empty tuple, but vectors have one dimension, so the tuple includes a number and a comma. (Python doesn’t understand `(3)` as a tuple with one item, so it requires the comma. You can read more about tuples [here](https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences))\n\nYou can access an element within the vector using indices, like this:\n```\nx = v[1]\n```\nNow `x` equals `2`. \n\nNumPy also supports advanced indexing techniques. For example, to access the items from the second element onward, you would say:\n```\nv[1:]\n```\nand it would return an array of `[2, 3]`. NumPy slicing is quite powerful, allowing you to access any combination of items in an `ndarray`. But it can also be a bit complicated, so you should read up on it [in the documentation](https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html). \n\n### Matrices\n\nYou create matrices using NumPy's `array` function,  just you did for vectors. However, instead of just passing in a list, you need to supply a list of lists, where each list represents a row. So to create a 3x3 matrix containing the numbers one through nine, you could do this:\n```\nm = np.array([[1,2,3], [4,5,6], [7,8,9]])\n```\nChecking its `shape` attribute would return the tuple `(3, 3)` to indicate it has two dimensions, each length 3.\n\nYou can access elements of matrices just like vectors, but using additional index values. So to find the number `6` in the above matrix, you'd access `m[1][2]`.\n\n### Tensors\n\nTensors are just like vectors and matrices, but they can have more dimensions. For example, to create a 3x3x2x1 tensor, you could do the following:\n```\nt = np.array([[[[1],[2]],[[3],[4]],[[5],[6]]],[[[7],[8]],\\\n    [[9],[10]],[[11],[12]]],[[[13],[14]],[[15],[16]],[[17],[17]]]])\n```\nAnd `t.shape` would return `(3, 3, 2, 1)`.\n\nYou can access items just like with matrices, but with more indices. So `t[2][1][1][0]` will return `16`.\n\n### Changing Shapes\n\nSometimes you'll need to change the shape of your data without actually changing its contents. For example, you may have a vector, which is one-dimensional, but need a matrix, which is two-dimensional. There are two ways you can do that.\n\nLet's say you have the following vector:\n```\nv = np.array([1,2,3,4])\n```\nCalling `v.shape` would return `(4,)`. But what if you want a 1x4 matrix? You can accomplish that with the [`reshape`](https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html) function, like so:\n```\nx = v.reshape(1,4)\n```\nCalling `x.shape` would return `(1,4)`. If you wanted a 4x1 matrix, you could do this:\n```\nx = v.reshape(4,1)\n```\nThe `reshape` function works for more than just adding a dimension of size 1. Check out its [documentation](https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html) for more examples.\n\nOne more thing about reshaping NumPy arrays: if you see code from experienced NumPy users, you will often see them use a special slicing syntax instead of calling `reshape`. Using this syntax, the previous two examples would look like this:\n```\nx = v[None, :]\n```\nor\n```\nx = v[:, None]\n```\nThose lines create a slice that looks at all of the items of `v` but asks NumPy to add a new dimension of size 1 for the associated axis. It may look strange to you now, but it's a common technique so it's good to be aware of it. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 286227,
          "key": "62417569-6191-4406-80b8-eb9b48614d9c",
          "title": "Element-wise Matrix Operations",
          "semantic_type": "Concept",
          "is_public": true,
          "resources": null,
          "atoms": [
            {
              "id": 286873,
              "key": "267325a1-361c-41f0-b2b6-843eea3a20a3",
              "title": "Element-wise Matrix Operations",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "vjUykZyzko4",
                "china_cdn_id": "vjUykZyzko4.mp4"
              }
            }
          ]
        },
        {
          "id": 286226,
          "key": "d554877a-8a71-4f05-8756-941fd4080320",
          "title": "Element-wise Operations in NumPy",
          "semantic_type": "Concept",
          "is_public": true,
          "resources": null,
          "atoms": [
            {
              "id": 286397,
              "key": "d0778212-5f6c-4eb1-925c-339edab81deb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Element-wise operations\n\n### The Python way\nSuppose you had a list of numbers, and you wanted to add `5` to every item in the list. Without NumPy, you might do something like this:\n```\nvalues = [1,2,3,4,5]\nfor i in range(len(values)):\n    values[i] += 5\n\n# now values holds [6,7,8,9,10]\n```\nThat makes sense, but it's a lot of code to write and it runs slowly because it's pure Python. \n\n**Note:** Just in case you aren't used to using operators like `+=`, that just means \"add these two items and then store the result in the left item.\" It is a more succinct way of writing `values[i] = values[i] + 5`. The code you see in these examples makes use of such operators whenever possible.\n\n### The NumPy way\n\nIn NumPy, we could do the following:\n```\nvalues = [1,2,3,4,5]\nvalues = np.array(values) + 5\n\n# now values is an ndarray that holds [6,7,8,9,10]\n```\n\nCreating that array may seem odd, but normally you'll be storing your data in `ndarray`s anyway. So if you already had an `ndarray` named `values`, you could have just done:\n```\nvalues += 5\n``` \n\nWe should point out, NumPy actually has functions for things like adding, multiplying, etc. But it also supports using the standard math operators. So the following two lines are equivalent:\n```\nx = np.multiply(some_array, 5)\nx = some_array * 5\n``` \nWe will usually use the operators instead of the functions because they are more convenient to type and easier to read, but it's really just personal preference.\n\nOne more example of operating with scalars and `ndarrays`. Let's say you have a matrix `m` and you want to reuse it, but first you need to set all its values to zero. Easy, just multiply by zero and assign the result back to the matrix, like this:\n```\nm *= 0\n\n# now every element in m is zero, no matter how many dimensions it has\n```\n\n### Element-wise Matrix Operations\n\nThe same functions and operators that work with scalars and matrices also work with other dimensions. You just need to make sure that the items you perform the operation on have compatible shapes. \n\nLet's say you want to get the squared values of a matrix. That's simply `x = m * m` (or if you want to assign the value back to `m`, it's just `m *= m`\n\nThis works because it's an element-wise multiplication between two identically-shaped matrices. (In this case, they are shaped the same because they are actually the same object.)\n\nHere's the example from the video:\n```\na = np.array([[1,3],[5,7]])\na\n# displays the following result:\n# array([[1, 3],\n#        [5, 7]])\n\nb = np.array([[2,4],[6,8]])\nb\n# displays the following result:\n# array([[2, 4],\n#        [6, 8]])\n\na + b\n# displays the following result\n#      array([[ 3,  7],\n#             [11, 15]])\n```\n\nAnd if you try working with incompatible shapes, like the other example from the video, you'd get an error:\n```\na = np.array([[1,3],[5,7]])\na\n# displays the following result:\n# array([[1, 3],\n#        [5, 7]])\nc = np.array([[2,3,6],[4,5,9],[1,8,7]])\nc\n# displays the following result:\n# array([[2, 3, 6],\n#        [4, 5, 9],\n#        [1, 8, 7]])\n\na.shape\n# displays the following result:\n#  (2, 2)\n\nc.shape\n# displays the following result:\n#  (3, 3)\n\na + c\n# displays the following error:\n# ValueError: operands could not be broadcast together with shapes (2,2) (3,3) \n```\n\nYou'll learn more about what that \"could not be broadcast together\" means in a later lesson, but for now, just notice that the two shapes are different so we can't perform the element-wise operation.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 286228,
          "key": "4b63f617-19bd-4dd0-a2b3-fdd6e2df241b",
          "title": "Matrix Multiplication: Part 1",
          "semantic_type": "Concept",
          "is_public": true,
          "resources": null,
          "atoms": [
            {
              "id": 286874,
              "key": "af67fb09-8915-495a-b6cc-1680307dd3df",
              "title": "Matrix Multiplication: Part 1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "Some more information about [dot products](https://en.wikipedia.org/wiki/Dot_product)\n",
              "video": {
                "youtube_id": "JRoCFQRP4B0",
                "china_cdn_id": "JRoCFQRP4B0.mp4"
              }
            }
          ]
        },
        {
          "id": 286229,
          "key": "d14678eb-f4cc-4474-9ffb-8d77befb50c4",
          "title": "Matrix Multiplication: Part 2",
          "semantic_type": "Concept",
          "is_public": true,
          "resources": null,
          "atoms": [
            {
              "id": 286875,
              "key": "eac23bfc-00ec-4a58-bae8-e08371f370ff",
              "title": "Matrix Multiplication: Part 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "8jtk8BzBdj8",
                "china_cdn_id": "8jtk8BzBdj8.mp4"
              }
            },
            {
              "id": 287306,
              "key": "4a233421-6cf6-4a23-b936-bd6e2a381911",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Important Reminders About Matrix Multiplication\n\n* The **number** of **columns** in the **left** matrix **must equal** the **number** of **rows** in the **right** matrix.\n* The **answer** matrix **always has** the **same number** of **rows** as the **left** matrix and the **same number** of **columns** as the **right** matrix.\n* **Order matters**. Multiplying **A•B** is **not the same** as multiplying **B•A**.\n* Data in the **left** matrix **should be** arranged as **rows**., while data in the **right** matrix **should be** arranged as **columns**.\n\nIf you keep these four points in mind, you should always be able to figure out how to properly arrange your matrix multiplications when building a neural network.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 286230,
          "key": "6fd8d8a2-5ed4-4d88-9589-c40b34837a31",
          "title": "NumPy Matrix Multiplication",
          "semantic_type": "Concept",
          "is_public": true,
          "resources": null,
          "atoms": [
            {
              "id": 287296,
              "key": "d702217f-e9d3-4f3a-8b8e-23ad2fb419e6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# NumPy Matrix Multiplication\n\nYou've heard a lot about matrix multiplication in the last few videos – now you'll get to see how to do it with NumPy. However, it's important to know that NumPy supports several types of matrix multiplication. \n\n### Element-wise Multiplication\n\nYou saw some element-wise multiplication already. You accomplish that with the `multiply` function or the `*` operator. Just to revisit, it would look like this:\n\n```\nm = np.array([[1,2,3],[4,5,6]])\nm\n# displays the following result:\n# array([[1, 2, 3],\n#        [4, 5, 6]])\n\nn = m * 0.25\nn\n# displays the following result:\n# array([[ 0.25,  0.5 ,  0.75],\n#        [ 1.  ,  1.25,  1.5 ]])\n\nm * n\n# displays the following result:\n# array([[ 0.25,  1.  ,  2.25],\n#        [ 4.  ,  6.25,  9.  ]])\n\nnp.multiply(m, n)   # equivalent to m * n\n# displays the following result:\n# array([[ 0.25,  1.  ,  2.25],\n#        [ 4.  ,  6.25,  9.  ]])\n```\n\n### Matrix Product\n\nTo find the matrix product, you use NumPy's `matmul` function.\n\nIf you have compatible shapes, then it's as simple as this:\n\n```\na = np.array([[1,2,3,4],[5,6,7,8]])\na\n# displays the following result:\n# array([[1, 2, 3, 4],\n#        [5, 6, 7, 8]])\na.shape\n# displays the following result:\n# (2, 4)\n\nb = np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])\nb\n# displays the following result:\n# array([[ 1,  2,  3],\n#        [ 4,  5,  6],\n#        [ 7,  8,  9],\n#        [10, 11, 12]])\nb.shape\n# displays the following result:\n# (4, 3)\n\nc = np.matmul(a, b)\nc\n# displays the following result:\n# array([[ 70,  80,  90],\n#        [158, 184, 210]])\nc.shape\n# displays the following result:\n# (2, 3)\n```\nIf your matrices have incompatible shapes, you'll get an error, like the following:\n```\nnp.matmul(b, a)\n# displays the following error:\n# ValueError: shapes (4,3) and (2,4) not aligned: 3 (dim 1) != 2 (dim 0)\n```\n\n### NumPy's `dot` function\n\nYou may sometimes see NumPy's [`dot`](https://docs.scipy.org/doc/numpy/reference/generated/numpy.dot.html) function in places where you would expect a `matmul`. It turns out that the results of `dot` and `matmul` are the same *if the matrices are two dimensional*. \n\nSo these two results are equivalent:\n```\na = np.array([[1,2],[3,4]])\na\n# displays the following result:\n# array([[1, 2],\n#        [3, 4]])\n\nnp.dot(a,a)\n# displays the following result:\n# array([[ 7, 10],\n#        [15, 22]])\n\na.dot(a)  # you can call `dot` directly on the `ndarray`\n# displays the following result:\n# array([[ 7, 10],\n#        [15, 22]])\n\nnp.matmul(a,a)\n# array([[ 7, 10],\n#        [15, 22]])\n```\nWhile these functions return the same results for two dimensional data, you should be careful about which you choose when working with other data shapes. You can read more about the differences, and find links to other NumPy functions, in the [`matmul`](https://docs.scipy.org/doc/numpy/reference/generated/numpy.matmul.html#numpy.matmul) and [`dot`](https://docs.scipy.org/doc/numpy/reference/generated/numpy.dot.html) documentation. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 286231,
          "key": "23a02fad-0c3e-49b3-b623-a991164d8791",
          "title": "Matrix Transposes",
          "semantic_type": "Concept",
          "is_public": true,
          "resources": null,
          "atoms": [
            {
              "id": 289139,
              "key": "97421ef8-24c3-4eea-a66b-640da1d7397c",
              "title": "Matrix Transposes",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "NVK5xCY3CZE",
                "china_cdn_id": "NVK5xCY3CZE.mp4"
              }
            }
          ]
        },
        {
          "id": 286398,
          "key": "518bd189-d948-4160-91b2-c3a0a04bed1e",
          "title": "Transposes in NumPy",
          "semantic_type": "Concept",
          "is_public": true,
          "resources": null,
          "atoms": [
            {
              "id": 286401,
              "key": "3a3a4ee6-6d7a-4d30-a096-7304905b7221",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Transpose\n\nGetting the transpose of a matrix is really easy in NumPy. Simply access its `T` attribute. There is also a `transpose()` function which returns the same thing, but you’ll rarely see that used anywhere because typing `T` is so much easier. :)\n\nFor example:\n```\nm = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])\nm\n# displays the following result:\n# array([[ 1,  2,  3,  4],\n#        [ 5,  6,  7,  8],\n#        [ 9, 10, 11, 12]])\n\nm.T\n# displays the following result:\n# array([[ 1,  5,  9],\n#        [ 2,  6, 10],\n#        [ 3,  7, 11],\n#        [ 4,  8, 12]])\n```\n\nNumPy does this without actually moving any data in memory - it simply changes the way it indexes the original matrix - so it’s quite efficient.\n\nHowever, that also means you need to be careful with how you modify objects, because **they are sharing the same data**. For example, with the same matrix `m` from above, let's make a new variable `m_t` that stores `m`'s transpose. Then look what happens if we modify a value in `m_t`:\n```\nm_t = m.T\nm_t[3][1] = 200\nm_t\n# displays the following result:\n# array([[ 1,   5, 9],\n#        [ 2,   6, 10],\n#        [ 3,   7, 11],\n#        [ 4, 200, 12]])\n\nm\n# displays the following result:\n# array([[ 1,  2,  3,   4],\n#        [ 5,  6,  7, 200],\n#        [ 9, 10, 11,  12]])\n\n```\n\nNotice how it modified both the transpose and the original matrix, too! That's because they are sharing the same copy of data. So remember to consider the transpose just as a different view of your matrix, rather than a different matrix entirely.\n\n### A real use case\n\nI don't want to get into too many details about neural networks because you haven't covered them yet, but there is one place you will almost certainly end up using a transpose, or at least thinking about it.\n\nLet's say you have the following two matrices, called `inputs` and `weights`,\n```\ninputs = np.array([[-0.27,  0.45,  0.64, 0.31]])\ninputs\n# displays the following result:\n# array([[-0.27,  0.45,  0.64,  0.31]])\n\ninputs.shape\n# displays the following result:\n# (1, 4)\n\nweights = np.array([[0.02, 0.001, -0.03, 0.036], \\\n    [0.04, -0.003, 0.025, 0.009], [0.012, -0.045, 0.28, -0.067]])\n\nweights\n# displays the following result:\n# array([[ 0.02 ,  0.001, -0.03 ,  0.036],\n#        [ 0.04 , -0.003,  0.025,  0.009],\n#        [ 0.012, -0.045,  0.28 , -0.067]])\n\nweights.shape\n# displays the following result:\n# (3, 4)\n```\nI won't go into what they're for because you'll learn about them later, but you're going to end up wanting to find the **matrix product** of these two matrices.\n\nIf you try it like they are now, you get an error:\n```\nnp.matmul(inputs, weights)\n# displays the following error:\n# ValueError: shapes (1,4) and (3,4) not aligned: 4 (dim 1) != 3 (dim 0)\n```\nIf you did the matrix multiplication lesson, then you've seen this error before. It's complaining of incompatible shapes because the number of columns in the left matrix, `4`, does not equal the number of rows in the right matrix, `3`.\n\nSo that doesn't work, but notice if you take the transpose of the `weights` matrix, it will:\n```\nnp.matmul(inputs, weights.T)\n# displays the following result:\n# array([[-0.01299,  0.00664,  0.13494]])\n```\n\nIt also works if you take the transpose of `inputs` instead and swap their order, like we showed in the video:\n\n```\nnp.matmul(weights, inputs.T)\n# displays the following result:\n# array([[-0.01299],# \n#        [ 0.00664],\n#        [ 0.13494]])\n```\nThe two answers are transposes of each other, so which multiplication you use really just depends on the shape you want for the output.\n\n \n\n\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 286232,
          "key": "718762d9-244e-4778-9839-fc81fb1218fd",
          "title": "NumPy Quiz",
          "semantic_type": "Concept",
          "is_public": true,
          "resources": null,
          "atoms": [
            {
              "id": 287366,
              "key": "08ad433c-9cf7-436c-8e50-4464e55c8e7b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# NumPy Exam\n\nThis is just a short programming quiz that asks you use a few NumPy features. It is meant to give you a little practice if you don't have NumPy experience.",
              "instructor_notes": ""
            },
            {
              "id": 287367,
              "key": "fab1c4c1-ee13-437f-8099-d13cde66bb25",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5896489973972992",
                "initial_code_files": [
                  {
                    "text": "# Use the numpy library\nimport numpy as np\n\n\ndef prepare_inputs(inputs):\n    # TODO: create a 2-dimensional ndarray from the given 1-dimensional list;\n    #       assign it to input_array\n    input_array = None\n    \n    # TODO: find the minimum value in input_array and subtract that\n    #       value from all the elements of input_array. Store the\n    #       result in inputs_minus_min\n    inputs_minus_min = None\n\n    # TODO: find the maximum value in inputs_minus_min and divide\n    #       all of the values in inputs_minus_min by the maximum value.\n    #       Store the results in inputs_div_max.\n    inputs_div_max = None\n\n    # return the three arrays we've created\n    return input_array, inputs_minus_min, inputs_div_max\n    \n\ndef multiply_inputs(m1, m2):\n    # TODO: Check the shapes of the matrices m1 and m2. \n    #       m1 and m2 will be ndarray objects.\n    #\n    #       Return False if the shapes cannot be used for matrix\n    #       multiplication. You may not use a transpose\n    pass\n\n\n    # TODO: If you have not returned False, then calculate the matrix product\n    #       of m1 and m2 and return it. Do not use a transpose,\n    #       but you swap their order if necessary\n    pass\n    \n\ndef find_mean(values):\n    # TODO: Return the average of the values in the given Python list\n    pass\n\n\ninput_array, inputs_minus_min, inputs_div_max = prepare_inputs([-1,2,7])\nprint(\"Input as Array: {}\".format(input_array))\nprint(\"Input minus min: {}\".format(inputs_minus_min))\nprint(\"Input  Array: {}\".format(inputs_div_max))\n\nprint(\"Multiply 1:\\n{}\".format(multiply_inputs(np.array([[1,2,3],[4,5,6]]), np.array([[1],[2],[3],[4]]))))\nprint(\"Multiply 2:\\n{}\".format(multiply_inputs(np.array([[1,2,3],[4,5,6]]), np.array([[1],[2],[3]]))))\nprint(\"Multiply 3:\\n{}\".format(multiply_inputs(np.array([[1,2,3],[4,5,6]]), np.array([[1,2]]))))\n\nprint(\"Mean == {}\".format(find_mean([1,3,4])))",
                    "name": "numpy_fun.py"
                  },
                  {
                    "text": "# Use the numpy library\nimport numpy as np\n\n\n######################################################\n#\n#      MESSAGE TO STUDENTS:\n#\n#  This file contains a solution to the coding quiz. Feel free\n#  to look at it when you are stuck, but try to solve the\n#   problem on your own first.\n#\n######################################################\n\n\ndef prepare_inputs(inputs):\n    # TODO: create a 2-dimensional ndarray from the given 1-dimensional list;\n    #       assign it to input_array\n    input_array = np.array([inputs])\n    \n    # TODO: find the minimum value in input_array and subtract that\n    #       value from all the elements of input_array. Store the\n    #       result in inputs_minus_min\n    # We can use NumPy's min function and element-wise division\n    inputs_minus_min = input_array - np.min(input_array)\n\n    # TODO: find the maximum value in inputs_minus_min and divide\n    #       all of the values in inputs_minus_min by the maximum value.\n    #       Store the results in inputs_div_max.\n    # We can use NumPy's max function and element-wise division\n    inputs_div_max = inputs_minus_min / np.max(inputs_minus_min)\n\n    return input_array, inputs_minus_min, inputs_div_max\n    \n\ndef multiply_inputs(m1, m2):\n    # Check the shapes of the matrices m1 and m2. \n    # m1 and m2 will be ndarray objects.\n    #\n    # Return False if the shapes cannot be used for matrix\n    # multiplication. You may not use a transpose\n    if m1.shape[0] != m2.shape[1] and m1.shape[1] != m2.shape[0]:     \n        return False\n\n    # Have not returned False, so calculate the matrix product\n    # of m1 and m2 and return it. Do not use a transpose,\n    #       but you swap their order if necessary\n    if m1.shape[1] == m2.shape[0]:\n        return np.matmul(m1, m2)        \n    else:\n        return np.matmul(m2, m1)        \n\n\ndef find_mean(values):\n    # Return the average of the values in the given Python list\n    # NumPy has a lot of helpful methods like this.\n    return np.mean(values)\n",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}